# syntax=docker/dockerfile:1.7-labs

ARG DOCKER_LAYER_BIN
ARG EMACS_DIR
ARG ORGMODE_TOKEN
ARG GH_USER_NAME
ARG GH_USER_EMAIL
ARG XDG_CONFIG_HOME
ARG SPACEMACS_D_REPO
ARG NVM_DIR
ARG CLJ_KONDO_DIR
ARG JAVA_HOME
ARG CLOJURE_DIR
ARG GO_DIR

################################################################################
FROM xdg AS emmy-spok
################################################################################

ARG DOCKER_LAYER_BIN
ARG EMACS_DIR
ARG ORGMODE_TOKEN
ARG ORGMODE_REPO
ARG GH_USER_NAME
ARG GH_USER_EMAIL
ARG XDG_CONFIG_HOME
ARG SPACEMACS_D_REPO
ARG NVM_DIR
ARG CLJ_KONDO_DIR
ARG JAVA_HOME
ARG CLOJURE_DIR
ARG GO_DIR

ARG LAYERS=/spacemacs/layers

COPY --from=gpu-layer / /
COPY --from=docker-layer ${LAYERS}/tools/docker ${LAYERS}/tools/docker
COPY --from=docker-layer ${NVM_DIR} ${NVM_DIR}
COPY --from=clojure-layer ${LAYERS}/lang/clojure ${LAYERS}/lang/clojure
COPY --from=clojure-layer ${GO_DIR} ${GO_DIR}
COPY --from=clojure-layer ${JAVA_HOME} ${JAVA_HOME}
COPY --from=clojure-layer ${CLOJURE_DIR} ${CLOJURE_DIR}
COPY --from=emacs ${EMACS_DIR} ${EMACS_DIR}

#-------------------------------------------------------------------------------
# runtime dependencies
#-------------------------------------------------------------------------------

RUN bash -x <<"EOF"
set -eu
apt-get update
apt-get install -y --no-install-recommends \
    ca-certificates \
    libxpm4 \
    libpng16-16 \
    libjpeg8 \
    libtiff5 \
    libgif7 \
    librsvg2-2 \
    libwebp7 \
    libgtk-3-0 \
    libgccjit0 \
    libjansson4 \
    libwebkit2gtk-4.0-37 \
    libmagickwand-6.q16-6 \
    libice6 \
    libsm6 \
    curl \
    git \
    wget \
    curl \
    fonts-firacode \
    libxtst6 \
    libcanberra-gtk3-module \
    apt-transport-https \
    xdg-utils
apt-get clean
apt-get autoremove -y
rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /var/cache/*
EOF

# -----------------------------------------------------------------------------
# brave
# -----------------------------------------------------------------------------
RUN bash -x <<"EOF"
curl -fsSLo /usr/share/keyrings/brave-browser-archive-keyring.gpg \
    https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
echo "deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main" | \
    tee /etc/apt/sources.list.d/brave-browser-release.list
apt update
apt install -y --no-install-recommends \
    brave-browser
update-alternatives --install /usr/bin/x-www-browser x-www-browser /usr/bin/brave-browser 200
update-alternatives --set x-www-browser /usr/bin/brave-browser
apt-get clean
apt-get autoremove -y
rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /var/cache/*
EOF

# ------------------------------------------------------------------------------
# github cli
# ------------------------------------------------------------------------------

RUN bash -x <<"EOF"
set -eu
mkdir -p -m 755 /etc/apt/keyrings
wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | \
    tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null
chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
apt update
apt install gh -y
echo ${ORGMODE_TOKEN} | gh auth login --with-token
git config --global user.name ${GH_USER_NAME}
git config --global user.email ${GH_USER_EMAIL}
EOF

# ------------------------------------------------------------------------------
# clone repos
# ------------------------------------------------------------------------------

RUN bash -x <<"EOF"
set -eu
cd ${XDG_CONFIG_HOME}
git clone https://github.com/syl20bnr/spacemacs emacs
git clone $SPACEMACS_D_REPO
if gh auth status > /dev/null 2>&1; then
    git clone https://${ORGMODE_TOKEN}@github.com/${ORGMODE_REPO}.git
else
    echo "gh not authenticated"
exit 1
fi
EOF

#-------------------------------------------------------------------------------
# entrypoint
#-------------------------------------------------------------------------------

RUN echo -e "/opt/jdk/lib\n/opt/jdk/lib/server" | tee /etc/ld.so.conf.d/jdk.conf && ldconfig
ENV MAVEN_OPTS="-Dmaven.repo.local=/.m2"
COPY entrypoint.sh /usr/local/bin/entrypoint.sh

