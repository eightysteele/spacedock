# docker compose -f docker-layer-compose.yml -f compose-emacs.yml -f compose-emmy-spok.yml up -d --build emmy-spok
# docker compose exec emmy-spok /usr/local/bin/entrypoint.sh

services:
  emmy-spok:
    image: emmy-spok
    container_name: emmy-spok
    command: tail -f /dev/null
    build:
      dockerfile: Dockerfile.emmy-spok
      tags:
        - emmy-spok
      args:
        DOCKER_LAYER_BIN: ${DOCKER_LAYER_BIN}
        EMACS_DIR: ${SPACEDOCK_EMACS_DIR}
        ORGMODE_TOKEN: ${ORG_TOKEN}
        ORGMODE_REPO: ${ORG_REPO}
        GH_USER_NAME: ${GH_USER_NAME}
        GH_USER_EMAIL: ${GH_USER_EMAIL}
        XDG_CONFIG_HOME: ${SPACEDOCK_XDG_CONFIG_HOME}
        SPACEMACS_D_REPO: ${SPACEMACS_D_REPO}
        NVM_DIR: ${SPACEDOCK_NVM_DIR}
    depends_on:
      xdg:
        required: true
        condition: service_completed_successfully
      emacs:
        required: true
        condition: service_completed_successfully
      gpu-layer:
        required: true
        condition: service_completed_successfully
      docker-layer:
        required: true
        condition: service_completed_successfully
    env_file:
      - emmy-spok.env
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: ['0']
              capabilities: [gpu]
    stdin_open: true
    tty: true
    shm_size: 2g
    privileged: true
    volumes:
      - emmy-spok-emacs-cache:/opt/xdg/.config/emacs/.cache
      - emmy-spok-emacs-eln-cache:/opt/xdg/.config/emacs/eln-cache
      - emmy-spok-emacs-elpa:/opt/xdg/.config/emacs/elpa
      - emmy-spok-emacs-quelpa:/opt/xdg/.config/emacs/quelpa
      - emmy-spok-emacs-org-roam:/opt/xdg/.config/emacs/org-roam
      - /home/eighty/code/github:/home/eighty/code/github
      - /tmp/.X11-unix:/tmp/.X11-unix
      - /tmp/emacs1000:/tmp/emacs1000

  # ============================================================================
  # gpu layer
  # ============================================================================

  gpu-layer:
    image: gpu-layer
    container_name: gpu-layer
    #command: tail -f /dev/null
    build:
      dockerfile: Dockerfile.gpu-layer
      tags:
        - gpu-layer
      args:
        LLVM_VERSION: 18
        NVIDIA_BASE_IMAGE: nvidia/cuda:12.4.1-cudnn-devel-ubuntu22.04
    depends_on:
      - xdg

  # ============================================================================
  # docker layer
  # ============================================================================

  docker-layer:
    image: docker-layer
    container_name: docker-layer
    #command: tail -f /dev/null
    build:
      dockerfile: Dockerfile.docker-layer
      tags:
        - docker-layer
      args:
        LAYER_NAME: docker
        LAYER_TYPE: tools
        NVM_DIR: ${SPACEDOCK_NVM_DIR}
        CABAL_DIR: ${SPACEDOCK_CABAL_DIR}
        NVM_VERSION: 0.39.3
        NODE_VERSION: 20.13.1
    depends_on:
      xdg:
        required: true
        condition: service_completed_successfully
      docker-lsp:
        required: true
        condition: service_completed_successfully
      hadolint:
        required: true
        condition: service_completed_successfully

  # ----------------------------------------------------------------------------
  # docker layer dependencies
  # ----------------------------------------------------------------------------

  docker-lsp:
    image: docker-lsp
    container_name: docker-lsp
    #command: tail -f /dev/null
    build:
      dockerfile: Dockerfile.docker-lsp
      tags:
        - docker-lsp
      args:
        NVM_DIR: ${SPACEDOCK_NVM_DIR}
    depends_on:
      node:
        required: true
        condition: service_completed_successfully
  hadolint:
    image: hadolint
    container_name: hadolint
    #command: tail -f /dev/null
    build:
      dockerfile: Dockerfile.hadolint
      tags:
        - hadolint
      args:
        XDG_BIN_HOME: ${SPACEDOCK_XDG_BIN_HOME}
        XDG_CONFIG_HOME: ${SPACEDOCK_XDG_CONFIG_HOME}
        CABAL_DIR: ${SPACEDOCK_CABAL_DIR}
    depends_on:
      shellcheck:
        required: true
        condition: service_completed_successfully

  # ----------------------------------------------------------------------------
  # docker layer build dependencies
  # ----------------------------------------------------------------------------

  node:
    image: node
    container_name: node
    #command: tail -f /dev/null
    build:
      dockerfile: Dockerfile.node
      tags:
        - node
      args:
        NVM_DIR: ${SPACEDOCK_NVM_DIR}
        NVM_VERSION: 0.39.3
        NODE_VERSION: 20.13.1
    depends_on:
      xdg:
        required: true
        condition: service_completed_successfully
  shellcheck:
    image: shellcheck
    container_name: shellcheck
    #command: tail -f /dev/null
    build:
      dockerfile: Dockerfile.shellcheck
      tags:
        - shellcheck
      args:
        XDG_BIN_HOME: ${SPACEDOCK_XDG_BIN_HOME}
        CABAL_DIR: ${SPACEDOCK_CABAL_DIR}
    depends_on:
      cabal:
        required: true
        condition: service_completed_successfully
  cabal:
    image: cabal
    container_name: cabal
    #command: tail -f /dev/null
    build:
      dockerfile: Dockerfile.cabal
      tags:
        - cabal
      args:
        XDG_BIN_HOME: ${SPACEDOCK_XDG_BIN_HOME}
        XDG_CONFIG_HOME: ${SPACEDOCK_XDG_CONFIG_HOME}
        XDG_DATA_HOME: ${SPACEDOCK_XDG_DATA_HOME}
        CABAL_DIR: ${SPACEDOCK_CABAL_DIR}
        BOOTSTRAP_HASKELL_NONINTERACTIVE: 1
        GHCUP_USE_XDG_DIRS: 1
        BOOTSTRAP_HASKELL_VERBOSE: 1
        BOOTSTRAP_HASKELL_ADJUST_BASHRC: 1
    depends_on:
      xdg:
        required: true
        condition: service_completed_successfully

# ----------------------------------------------------------------------------
# volumes
# ----------------------------------------------------------------------------

volumes:
  emmy-spok-emacs-cache:
  emmy-spok-emacs-eln-cache:
  emmy-spok-emacs-elpa:
  emmy-spok-emacs-quelpa:
  emmy-spok-emacs-org-roam:
